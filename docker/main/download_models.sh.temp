#!/bin/bash

# 模型预下载脚本
# 根据配置下载所需的模型文件到模型缓存目录

set -euo pipefail

echo "🚀 开始预下载Frigate模型文件..."

# 设置模型缓存目录
MODEL_CACHE_DIR="/config/model_cache"
mkdir -p "$MODEL_CACHE_DIR"

# 定义模型下载函数
download_model() {
    local model_dir="$1"
    local file_name="$2"
    local url="$3"
    local target_path="$MODEL_CACHE_DIR/$model_dir/$file_name"
    
    echo "📥 下载 $model_dir/$file_name..."
    mkdir -p "$MODEL_CACHE_DIR/$model_dir"
    
    # 使用wget下载，支持重试
    wget -q --show-progress --tries=10 --timeout=600 --continue -O "$target_path" "$url"
    
    if [ $? -eq 0 ]; then
        echo "✅ $model_dir/$file_name 下载完成"
    else
        echo "❌ $model_dir/$file_name 下载失败"
        return 1
    fi
}

# 1. 语义搜索模型 (JinaV2 Large)
echo "🔍 下载语义搜索模型 (JinaV2 Large)..."
mkdir -p "$MODEL_CACHE_DIR/jina_v2"

# JinaV2模型文件 - 使用HuggingFace的原始链接
JINA_V2_FILES=(
    "model_fp16.onnx"
    "tokenizer/tokenizer.json"
    "tokenizer/tokenizer_config.json"
    "tokenizer/vocab.txt"
)

# 创建tokenizer目录
mkdir -p "$MODEL_CACHE_DIR/jina_v2/tokenizer"

for file in "${JINA_V2_FILES[@]}"; do
    if [[ "$file" == tokenizer/* ]]; then
        # tokenizer文件需要特殊处理
        url="https://huggingface.co/jinaai/jina-clip-v2/resolve/main/$file?download=true"
    else
        url="https://huggingface.co/jinaai/jina-clip-v2/resolve/main/onnx/$file?download=true"
    fi
    download_model "jina_v2" "$file" "$url"
done

# 2. 人脸识别模型 (Large)
echo "👤 下载人脸识别模型 (Large)..."
mkdir -p "$MODEL_CACHE_DIR/facedet"

# 人脸检测模型
download_model "facedet" "facedet.onnx" "https://github.com/NickM-27/facenet-onnx/releases/download/v1.0/facedet.onnx"
download_model "facedet" "landmarkdet.yaml" "https://github.com/NickM-27/facenet-onnx/releases/download/v1.0/landmarkdet.yaml"

# 人脸嵌入模型 (Large - ArcFace)
mkdir -p "$MODEL_CACHE_DIR/face_embedding"
download_model "face_embedding" "arcface.onnx" "https://github.com/NickM-27/facenet-onnx/releases/download/v1.0/arcface.onnx"

# 3. 车牌识别模型
echo "🚗 下载车牌识别模型..."
mkdir -p "$MODEL_CACHE_DIR/lpr"

# 车牌检测模型
download_model "lpr" "yolov9-256-license-plates.onnx" "https://github.com/hawkeye217/yolov9-license-plates/raw/refs/heads/master/models/yolov9-256-license-plates.onnx"

# 车牌分类模型
download_model "lpr" "classification.onnx" "https://github.com/hawkeye217/paddleocr-onnx/raw/refs/heads/master/models/classification.onnx"

# 车牌识别模型
download_model "lpr" "recognition.onnx" "https://github.com/hawkeye217/paddleocr-onnx/raw/refs/heads/master/models/recognition.onnx"

# 4. 鸟类分类模型 (禁用，但为了完整性也下载)
echo "�� 下载鸟类分类模型..."
mkdir -p "$MODEL_CACHE_DIR/bird"

download_model "bird" "bird.tflite" "https://raw.githubusercontent.com/google-coral/test_data/master/mobilenet_v2_1.0_224_inat_bird_quant.tflite"
download_model "bird" "birdmap.txt" "https://raw.githubusercontent.com/google-coral/test_data/master/inat_bird_labels.txt"

# 5. 创建模型状态文件
echo "📝 创建模型状态文件..."
cat > "$MODEL_CACHE_DIR/models_status.json" << 'JSON_EOF'
{
  "semantic_search": {
    "model": "jinav2",
    "model_size": "large",
    "status": "downloaded"
  },
  "face_recognition": {
    "model_size": "large",
    "status": "downloaded"
  },
  "lpr": {
    "status": "downloaded"
  },
  "bird": {
    "status": "downloaded"
  },
  "download_time": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
}
JSON_EOF

# 6. 验证下载的文件
echo "🔍 验证下载的模型文件..."
total_files=0
downloaded_files=0

for model_dir in "jina_v2" "facedet" "face_embedding" "lpr" "bird"; do
    if [ -d "$MODEL_CACHE_DIR/$model_dir" ]; then
        files_in_dir=$(find "$MODEL_CACHE_DIR/$model_dir" -type f | wc -l)
        total_files=$((total_files + files_in_dir))
        downloaded_files=$((downloaded_files + files_in_dir))
        echo "✅ $model_dir: $files_in_dir 个文件"
    fi
done

echo "📊 下载统计: $downloaded_files/$total_files 个文件成功下载"

# 7. 设置权限
echo "🔐 设置文件权限..."
chmod -R 755 "$MODEL_CACHE_DIR"

echo "🎉 模型预下载完成！"
echo "📁 模型文件存储在: $MODEL_CACHE_DIR"
echo "📋 支持的配置:"
echo "   - 语义搜索: JinaV2 Large"
echo "   - 人脸识别: Large (ArcFace)"
echo "   - 车牌识别: 已启用"
echo "   - 鸟类分类: 已下载 (配置中禁用)"
