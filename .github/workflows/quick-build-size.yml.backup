name: 快速构建 - 显示镜像大小

on:
  # 手动触发
  workflow_dispatch:
  # 星标仓库时触发
  watch:
    types: [started]

jobs:
  quick_build:
    runs-on: ubuntu-22.04
    name: 快速构建和大小检查
    
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      # 设置 Docker Buildx
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 创建版本文件
      - name: 创建版本文件
        run: make version
      
      # 创建短提交哈希
      - name: 创建短提交哈希
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      
      # 构建 Docker 镜像
      - name: 构建 Docker 镜像
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/main/Dockerfile
          push: false
          load: true
          platforms: linux/amd64
          target: frigate
          tags: frigate:test-${{ env.SHORT_SHA }}
          outputs: type=docker,dest=/tmp/image.tar
      
      # 获取并显示镜像大小
      - name: 获取并显示镜像大小
        run: |
          echo "🐳 正在加载 Docker 镜像..."
          docker load -i /tmp/image.tar
          
          echo ""
          echo "📊 === FRIGATE DOCKER 镜像大小报告 ==="
          echo "仓库: ${{ github.repository }}"
          echo "分支: ${{ github.ref_name }}"
          echo "提交: ${{ env.SHORT_SHA }}"
          echo "平台: linux/amd64"
          echo "版本: v0.16.0-rc4"
          echo ""
          
          echo "📦 镜像详情:"
          if docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.ID}}" | grep "frigate:test"; then
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.ID}}" | grep "frigate:test"
          
          echo ""
          echo "🔍 详细大小分析:"
          IMAGE_SIZE=$(docker images --format "{{.Size}}" | grep -v "SIZE" | head -1)
          echo "总镜像大小: $IMAGE_SIZE"
          
          echo ""
          echo "📋 层信息:"
          docker history frigate:test-${{ env.SHORT_SHA }} --format "table {{.CreatedBy}}\t{{.Size}}" | head -10
          
          echo ""
          echo "💾 大小对比:"
          echo "- 标准 Frigate 镜像: ~2-4GB"
          echo "- 包含 TensorRT: ~3-5GB"
          echo "- 包含 GPU 支持: ~4-6GB"
          
          echo ""
          echo "✅ 构建成功完成!"
          echo "镜像标签: frigate:test-${{ env.SHORT_SHA }}"
      
      # 创建摘要
      - name: 创建摘要
        run: |
          echo "## 🐳 Frigate v0.16.0-rc4 Docker 镜像大小报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "- **仓库**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: v0.16.0-rc4" >> $GITHUB_STEP_SUMMARY
          echo "- **平台**: linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- **提交**: ${{ env.SHORT_SHA }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 镜像详情" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像标签**: frigate:test-${{ env.SHORT_SHA }}" >> $GITHUB_STEP_SUMMARY
          echo "- **构建状态**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 后续步骤" >> $GITHUB_STEP_SUMMARY
          echo "1. 查看上方构建日志获取详细大小信息" >> $GITHUB_STEP_SUMMARY
          echo "2. 如需要可下载镜像文件" >> $GITHUB_STEP_SUMMARY
          echo "3. 使用镜像进行测试或部署" >> $GITHUB_STEP_SUMMARY
      
      # 上传镜像作为构建产物
      - name: 上传镜像作为构建产物
        uses: actions/upload-artifact@v4
        with:
          name: frigate-v0.16.0-rc4-amd64
          path: /tmp/image.tar
          retention-days: 7
